<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://realityjxz.github.io</id>
    <title>Gridea</title>
    <updated>2020-07-15T14:21:09.655Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://realityjxz.github.io"/>
    <link rel="self" href="https://realityjxz.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://realityjxz.github.io/images/avatar.png</logo>
    <icon>https://realityjxz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[vs code配置python]]></title>
        <id>https://realityjxz.github.io/post/vs-code-pei-zhi-python/</id>
        <link href="https://realityjxz.github.io/post/vs-code-pei-zhi-python/">
        </link>
        <updated>2020-06-09T16:00:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安装-python">安装 Python</h1>
<h2 id="推荐安装-anaconda">推荐安装 Anaconda</h2>
<p>我这里推荐大家安装 Anaconda。Anaconda 是 Python 的一个发行版，用于进行大规模数据处理、预测分析，和科学计算，致力于简化包的管理和部署。Anaconda 使用软件包管理系统 Conda 进行包管理。Anaconda 官网上对 Anaconda 的描述是最受欢迎的 Python 数据科学平台。<br>
  对于初学者来说，刚开始需要安装很多东西，如果你不想这么麻烦，那么 Anaconda 一定是你的首选，它自带了一堆 Python 常用库，而它的包管理系统对初学者又非常的友好，可以轻松实现 Python中 的各种包。</p>
<h2 id="如何安装-anaconda">如何安装 Anaconda</h2>
<p>先去官网下载，选择你的操作系统所对应的版本，并选择你的 Python 版本（博主用得的是 Python3）。<br>
  下载完成后，点击安装即可。这里有几点要强调一下：</p>
<ol>
<li>配置环境变量。一定要勾选 Add Anaconda to my PATH environment variable，将 Anaconda 添加到环境变量，这样 VSCode 的插件才能找到 Python 环境（如果忘勾选了，也可以安装完后自己手动添加到环境变量里）。</li>
<li>将 Anaconda 设为默认的 Python 环境。勾选 Register Anaconda as my default Python 3.7。<br>
3.安装完成后会提示我们是否安装 VSCode , 我这里选择跳过，VSCode 待会我们自己装。<br>
  至此 Anaconda 已经安装完成。装完后运行 CMD，输入 conda --version 命令看看是否装好了：</li>
</ol>
<pre><code>$ conda --version
conda 4.5.11
</code></pre>
<p>如果出现版本号如 4.5.11，那么说明安装成功（只要出现数字即可，不需要和博主的一样）。再运行 conda activate 就进入 Anaconda 环境。</p>
<h2 id="安装-python-插件">安装 Python 插件</h2>
<p>在 VSCode 中搜索扩展 Python，如下图：</p>
<p><img src="https://realityjxz.github.io/post-images/1591718826152.png" alt="" loading="lazy"><br>
  安装完成后需要重新加载 VSCode 使插件生效。<br>
<img src="https://realityjxz.github.io/post-images/1591718859237.png" alt="" loading="lazy"><br>
配置 Python 环境<br>
  在 VSCode 中点击状态栏左下角的 Python 图标：<br>
<img src="https://realityjxz.github.io/post-images/1591718864285.png" alt="" loading="lazy"></p>
<p>然后选择 Python 解释器（博主电脑上装有三中解释器），这里博主选择我们刚才安装好的 Anaconda（第三个）：</p>
<h2 id="错误提示和格式化">错误提示和格式化</h2>
<p>Python 默认的语法提示工具是 PyLint，也可以选择其他的 linter 工具，比如 flake8。flake8 是 Python 官方发布的一款静态代码检查工具，如果想使用它的话首先在 Anaconda 的命令行工具中用 pip install flake8 安装；另外，在保存代码的时候 VSCode 可以自动进行 code formatting ，这个功能默认是关闭的且工具是 autopep8 , 如果想使用 yafp，则继续在命令行工具中用命令 pip install yapf 安装。<br>
  安装好这两个工具之后在 VSCode 的配置文件中进行设置：</p>
<pre><code>&quot;python.linting.enabled&quot;: true
&quot;python.linting.flake8Enabled&quot;: true,
&quot;python.formatting.provider&quot;: &quot;yapf&quot;
</code></pre>
<h2 id="anaconda-extension-pack-插件">Anaconda Extension Pack 插件</h2>
<p>这是一款 Anaconda 的扩展包，可增强使用 VSCode 的 Anaconda 的体验（强烈建议安装）。</p>
<h2 id="测试">测试</h2>
<p>测试我们配置是否正确：</p>
<p>新建一个文件夹 test，在 test 里新建一个 test.py 文件；<br>
用 VSCode 打开 test 文件夹；<br>
打开 test.py 写入如下代码</p>
<pre><code>print('Hello, world!') //python3版本
</code></pre>
<p>运行方法：<br>
全选代码，然后 SHIFT+ENTER。<br>
CTRL+~ 调出终端，输入 python test.py 回车运行文件.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博客网址]]></title>
        <id>https://realityjxz.github.io/post/bo-ke-wang-zhi/</id>
        <link href="https://realityjxz.github.io/post/bo-ke-wang-zhi/">
        </link>
        <updated>2020-03-25T06:05:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="博客园">博客园</h1>
<h2 id="httpswwwcnblogscomqdhxhz">https://www.cnblogs.com/qdhxhz</h2>
<p><strong>java、前端、框架、网络、数据库、运维</strong></p>
<h1 id="gridea配置教程">gridea配置教程</h1>
<h2 id="httpsfeheycomposthve-notes-start">https://fehey.com/post/hve-notes-start/</h2>
<p><strong>小白教程</strong></p>
<h2 id="httpssspaicompost54212">https://sspai.com/post/54212</h2>
<p><strong>Gridea 让你更方便地管理 Github Pages</strong><em>少数派</em></p>
<h2 id="httpswwwmaxiaobangcom1958htmltdsourcetags_pctim_aiomsg">https://www.maxiaobang.com/1958.html?tdsourcetag=s_pctim_aiomsg</h2>
<p><strong>最新版Win10数字权利激活，最牛X的激活工具！HWIDGen</strong></p>
<!-- more 超链接 和  引用   有疑惑  -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git命令]]></title>
        <id>https://realityjxz.github.io/post/git-ming-ling/</id>
        <link href="https://realityjxz.github.io/post/git-ming-ling/">
        </link>
        <updated>2019-07-20T13:40:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="常用-git-命令清单">常用 Git 命令清单</h1>
<p><strong>作者： 阮一峰</strong></p>
<p><em>日期： 2015年12月 9日</em></p>
<p>我每天使用 Git ，但是很多命令记不住。</p>
<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<figure data-type="image" tabindex="1"><img src="https://realityjxz.github.io/post-images/1563630267136.png" alt="" loading="lazy"></figure>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>
<p>Workspace：工作区<br>
Index / Stage：暂存区<br>
Repository：仓库区（或本地仓库）<br>
Remote：远程仓库</p>
<h1 id="一-新建代码库">一、新建代码库</h1>
<p>#在当前目录新建一个Git代码库<br>
$ git init</p>
<p>#新建一个目录，将其初始化为Git代码库<br>
$ git init [project-name]</p>
<p>#下载一个项目和它的整个代码历史<br>
$ git clone [url]</p>
<h1 id="二-配置">二、配置</h1>
<p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<p>#显示当前的Git配置<br>
$ git config --list</p>
<p>#编辑Git配置文件<br>
$ git config -e [--global]</p>
<p>#设置提交代码时的用户信息<br>
$ git config [--global] user.name &quot;[name]&quot;<br>
$ git config [--global] user.email &quot;[email address]&quot;</p>
<h1 id="三-增加删除文件">三、增加/删除文件</h1>
<p>#添加指定文件到暂存区<br>
$ git add [file1] [file2] ...</p>
<p>#添加指定目录到暂存区，包括子目录<br>
$ git add [dir]</p>
<p>#添加当前目录的所有文件到暂存区<br>
$ git add .</p>
<p>#添加每个变化前，都会要求确认<br>
#对于同一个文件的多处变化，可以实现分次提交<br>
$ git add -p</p>
<p>#删除工作区文件，并且将这次删除放入暂存区<br>
$ git rm [file1] [file2] ...</p>
<p>#停止追踪指定文件，但该文件会保留在工作区<br>
$ git rm --cached [file]</p>
<p>#改名文件，并且将这个改名放入暂存区<br>
$ git mv [file-original] [file-renamed]</p>
<h1 id="四-代码提交">四、代码提交</h1>
<p>#提交暂存区到仓库区<br>
$ git commit -m [message]</p>
<p>#提交暂存区的指定文件到仓库区<br>
$ git commit [file1] [file2] ... -m [message]</p>
<p>#提交工作区自上次commit之后的变化，直接到仓库区<br>
$ git commit -a</p>
<p>#提交时显示所有diff信息<br>
$ git commit -v</p>
<p>#使用一次新的commit，替代上一次提交<br>
#如果代码没有任何新变化，则用来改写上一次commit的提交信息<br>
$ git commit --amend -m [message]</p>
<p>#重做上一次commit，并包括指定文件的新变化<br>
$ git commit --amend [file1] [file2] ...</p>
<h1 id="五-分支">五、分支</h1>
<p>#列出所有本地分支<br>
$ git branch</p>
<p>#列出所有远程分支<br>
$ git branch -r</p>
<p>#列出所有本地分支和远程分支<br>
$ git branch -a</p>
<p>#新建一个分支，但依然停留在当前分支<br>
$ git branch [branch-name]</p>
<p>#新建一个分支，并切换到该分支<br>
$ git checkout -b [branch]</p>
<p>#新建一个分支，指向指定commit<br>
$ git branch [branch] [commit]</p>
<p>#新建一个分支，与指定的远程分支建立追踪关系<br>
$ git branch --track [branch] [remote-branch]</p>
<p>#切换到指定分支，并更新工作区<br>
$ git checkout [branch-name]</p>
<p>#切换到上一个分支<br>
$ git checkout -</p>
<p>#建立追踪关系，在现有分支与指定的远程分支之间<br>
$ git branch --set-upstream [branch] [remote-branch]</p>
<p>#合并指定分支到当前分支<br>
$ git merge [branch]</p>
<p>#选择一个commit，合并进当前分支<br>
$ git cherry-pick [commit]</p>
<p>#删除分支<br>
$ git branch -d [branch-name]</p>
<p>#删除远程分支<br>
$ git push origin --delete [branch-name]<br>
$ git branch -dr [remote/branch]</p>
<h1 id="六-标签">六、标签</h1>
<p>#列出所有tag<br>
$ git tag</p>
<p>#新建一个tag在当前commit<br>
$ git tag [tag]</p>
<p>#新建一个tag在指定commit<br>
$ git tag [tag] [commit]</p>
<p>#删除本地tag<br>
$ git tag -d [tag]</p>
<p>#删除远程tag<br>
$ git push origin :refs/tags/[tagName]</p>
<p>#查看tag信息<br>
$ git show [tag]</p>
<p>#提交指定tag<br>
$ git push [remote] [tag]</p>
<p>#提交所有tag<br>
$ git push [remote] --tags</p>
<p>#新建一个分支，指向某个tag<br>
$ git checkout -b [branch] [tag]</p>
<h1 id="七-查看信息">七、查看信息</h1>
<p>#显示有变更的文件<br>
$ git status</p>
<p>#显示当前分支的版本历史<br>
$ git log</p>
<p>#显示commit历史，以及每次commit发生变更的文件<br>
$ git log --stat</p>
<p>#搜索提交历史，根据关键词<br>
$ git log -S [keyword]</p>
<p>#显示某个commit之后的所有变动，每个commit占据一行<br>
$ git log [tag] HEAD --pretty=format:%s</p>
<p>#显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件<br>
$ git log [tag] HEAD --grep feature</p>
<p>#显示某个文件的版本历史，包括文件改名<br>
$ git log --follow [file]<br>
$ git whatchanged [file]</p>
<p>#显示指定文件相关的每一次diff<br>
$ git log -p [file]</p>
<p>#显示过去5次提交<br>
$ git log -5 --pretty --oneline</p>
<p>#显示所有提交过的用户，按提交次数排序<br>
$ git shortlog -sn</p>
<p>#显示指定文件是什么人在什么时间修改过<br>
$ git blame [file]</p>
<p>#显示暂存区和工作区的差异<br>
$ git diff</p>
<p>#显示暂存区和上一个commit的差异<br>
$ git diff --cached [file]</p>
<p>#显示工作区与当前分支最新commit之间的差异<br>
$ git diff HEAD</p>
<p>#显示两次提交之间的差异<br>
$ git diff [first-branch]...[second-branch]</p>
<p>#显示今天你写了多少行代码<br>
$ git diff --shortstat &quot;@{0 day ago}&quot;</p>
<p>#显示某次提交的元数据和内容变化<br>
$ git show [commit]</p>
<p>#显示某次提交发生变化的文件<br>
$ git show --name-only [commit]</p>
<p>#显示某次提交时，某个文件的内容<br>
$ git show [commit]:[filename]</p>
<p>#显示当前分支的最近几次提交<br>
$ git reflog</p>
<h1 id="八-远程同步">八、远程同步</h1>
<p>#下载远程仓库的所有变动<br>
$ git fetch [remote]</p>
<p>#显示所有远程仓库<br>
$ git remote -v</p>
<p>#显示某个远程仓库的信息<br>
$ git remote show [remote]</p>
<p>#增加一个新的远程仓库，并命名<br>
$ git remote add [shortname] [url]</p>
<p>#取回远程仓库的变化，并与本地分支合并<br>
$ git pull [remote] [branch]</p>
<p>#上传本地指定分支到远程仓库<br>
$ git push [remote] [branch]</p>
<p>#强行推送当前分支到远程仓库，即使有冲突<br>
$ git push [remote] --force</p>
<p>#推送所有分支到远程仓库<br>
$ git push [remote] --all</p>
<h1 id="九-撤销">九、撤销</h1>
<p>#恢复暂存区的指定文件到工作区<br>
$ git checkout [file]</p>
<p>#恢复某个commit的指定文件到暂存区和工作区<br>
$ git checkout [commit] [file]</p>
<p>#恢复暂存区的所有文件到工作区<br>
$ git checkout .</p>
<p>#重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<br>
$ git reset [file]</p>
<p>#重置暂存区与工作区，与上一次commit保持一致<br>
$ git reset --hard</p>
<p>#重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变<br>
$ git reset [commit]</p>
<p>#重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致<br>
$ git reset --hard [commit]</p>
<p>#重置当前HEAD为指定commit，但保持暂存区和工作区不变<br>
$ git reset --keep [commit]</p>
<p>#新建一个commit，用来撤销指定commit<br>
#后者的所有变化都将被前者抵消，并且应用到当前分支<br>
$ git revert [commit]</p>
<p>#暂时将未提交的变化移除，稍后再移入<br>
$ git stash<br>
$ git stash pop</p>
<h1 id="十-其他">十、其他</h1>
<p>#生成一个可供发布的压缩包<br>
$ git archive<br>
（完）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[牛客网-面试考点导图]]></title>
        <id>https://realityjxz.github.io/post/niu-ke-wang-mian-shi-kao-dian-dao-tu/</id>
        <link href="https://realityjxz.github.io/post/niu-ke-wang-mian-shi-kao-dian-dao-tu/">
        </link>
        <updated>2019-06-17T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>java相关知识</p>
]]></summary>
        <content type="html"><![CDATA[<p>java相关知识</p>
<!-- more --> 
<figure data-type="image" tabindex="1"><img src="https://realityjxz.github.io/post-images/1560740489357.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二阶魔方还原]]></title>
        <id>https://realityjxz.github.io/post/er-jie-mo-fang-huan-yuan/</id>
        <link href="https://realityjxz.github.io/post/er-jie-mo-fang-huan-yuan/">
        </link>
        <updated>2019-06-12T09:32:15.000Z</updated>
        <summary type="html"><![CDATA[<p>顶层还原</p>
]]></summary>
        <content type="html"><![CDATA[<p>顶层还原</p>
<!-- more -->
<p>首先底层同色<br>
接着上层同色  并保证有一侧面同色<br>
最后顶层朝向自己，同色侧面朝向右手，<br>
右180<br>
底180<br>
右逆<br>
上逆<br>
右顺<br>
底180<br>
右逆<br>
上顺<br>
右逆</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[华为手机隐藏代码]]></title>
        <id>https://realityjxz.github.io/post/hua-wei-shou-ji-yin-cang-dai-ma/</id>
        <link href="https://realityjxz.github.io/post/hua-wei-shou-ji-yin-cang-dai-ma/">
        </link>
        <updated>2019-06-10T01:29:10.000Z</updated>
        <content type="html"><![CDATA[<p>本文转载自：http://www.eefocus.com/consumer-electronics/395002</p>
<p>不少人都知道现在的手机都会有一些隐藏代码，可以通过它查看自己手机的相关信息。比如手机身份信息、硬件版本、软件使用情况等。但很多人不会去记，下面就和大家共同分享一下一些隐藏代码。</p>
<p>第一、＊＃06＃<br>
在拨号界面输入该代码可以查询手机的IMEI号，记录下来，在手机丢失后可以通过该号码锁定手机。<br>
<img src="https://realityjxz.github.io/post-images/1560130709135.jpg" alt="" loading="lazy"></p>
<p>第二、＊＃＊＃1357946＃＊＃＊<br>
在拨号界面输入该代码可以查询手机的序列号，通过序列号可以查询手机激活保修等信息。也可以判断手机是否为水货或翻新机。<br>
<img src="https://realityjxz.github.io/post-images/1560130714845.jpg" alt="" loading="lazy"></p>
<p>第三、＊＃0000＃<br>
在拨号界面输入该代码可以查询手机的版本号、型号硬件版本等信息。<br>
<img src="https://realityjxz.github.io/post-images/1560130725950.jpg" alt="" loading="lazy"></p>
<p>第四、＊＃＊＃2846579＃＊＃＊<br>
在拨号界面输入该代码可以进入手机的工程模式，看到手机的一些信息并对其进行设置。<br>
<img src="https://realityjxz.github.io/post-images/1560130732200.jpg" alt="" loading="lazy"></p>
<p>第五、＊＃＊＃6130＃＊＃＊<br>
在拨号界面输入该代码可以查询手机软件的使用情况，比如后台有没有流氓软件呐，别人用你手机干了啥呀，一目了然。<br>
<img src="https://realityjxz.github.io/post-images/1560130737516.jpg" alt="" loading="lazy"></p>
<p>相信大家都知道有隐藏代码这个东西，不同代码用处不同，有些比较方便实用，但是一般人都记不住这么长的代码，还是存起来比较好。希望这次的分享能对大家有用！</p>
<p>不想接电话时：拨号   ** 2 1* 1 #    变为空号<br>
解除  ##21#</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome to  person blog]]></title>
        <id>https://realityjxz.github.io/post/hello-gridea/</id>
        <link href="https://realityjxz.github.io/post/hello-gridea/">
        </link>
        <updated>2019-05-26T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎访问个人博客！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎访问个人博客！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/realityjxz">Github</a><br>
<a href="https://realityjxz.github.io">Gridea 主页</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>